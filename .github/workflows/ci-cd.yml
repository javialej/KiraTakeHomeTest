name: CI/CD

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
      - 'feature/**'
  delete:
    branches:
      - 'feature/**'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 22.x
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
      - run: npm install
      - run: npm run build
      - run: npm run test
      - run: npm run lint

  build_and_push_image:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: ci
    outputs:
      image_tag: ${{ steps.build-and-push.outputs.image_tag }}
    steps:
      - name: Check for secrets
        run: |
          if [ -z "${{ secrets.GCP_PROJECT_ID }}" ] || [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "GCP_PROJECT_ID or GCP_SA_KEY secrets are not set."
            exit 1
          fi
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Configure Docker
        run: gcloud auth configure-docker
      - name: Build and push Docker image
        id: build-and-push
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/kira-take-home-test:${IMAGE_TAG} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/kira-take-home-test:${IMAGE_TAG}
          echo "::set-output name=image_tag::${IMAGE_TAG}"

  deploy_dev:
    runs-on: ubuntu-latest
    needs: build_and_push_image
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/')
    environment:
      name: development
    steps:
      - name: Check for secrets
        run: |
          if [ -z "${{ secrets.GCP_PROJECT_ID }}" ] || [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "GCP_PROJECT_ID or GCP_SA_KEY secrets are not set."
            exit 1
          fi
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure
      - name: Terraform Workspace
        run: |
          WORKSPACE_NAME=$(echo ${{ github.ref_name }} | sed 's/\//-/g')
          terraform workspace select $WORKSPACE_NAME || terraform workspace new $WORKSPACE_NAME
        working-directory: ./infrastructure
      - name: Terraform Apply
        id: apply_dev
        run: terraform apply -auto-approve -var="image_tag=${{ needs.build_and_push_image.outputs.image_tag }}"
        working-directory: ./infrastructure
      - name: Health Check
        run: |
          sleep 30 # Wait for the service to be ready
          URL=$(terraform output -raw service_url)
          curl -f $URL/health
        working-directory: ./infrastructure

  destroy_dev:
    runs-on: ubuntu-latest
    if: github.event_name == 'delete' && startsWith(github.ref, 'refs/heads/feature/')
    environment:
      name: development
    steps:
      - name: Check for secrets
        run: |
          if [ -z "${{ secrets.GCP_PROJECT_ID }}" ] || [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "GCP_PROJECT_ID or GCP_SA_KEY secrets are not set."
            exit 1
          fi
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure
      - name: Terraform Workspace
        run: |
          WORKSPACE_NAME=$(echo ${{ github.event.ref }} | sed 's/\//-/g')
          terraform workspace select $WORKSPACE_NAME
        working-directory: ./infrastructure
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./infrastructure

  deploy_prod:
    runs-on: ubuntu-latest
    needs: build_and_push_image
    environment: production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check for secrets
        run: |
          if [ -z "${{ secrets.GCP_PROJECT_ID }}" ] || [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "GCP_PROJECT_ID or GCP_SA_KEY secrets are not set."
            exit 1
          fi
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure
      - name: Terraform Workspace
        run: terraform workspace select production || terraform workspace new production
        working-directory: ./infrastructure
      - name: Terraform Apply
        id: apply_prod
        run: terraform apply -auto-approve -var="image_tag=${{ needs.build_and_push_image.outputs.image_tag }}"
        working-directory: ./infrastructure
      - name: Health Check
        run: |
          sleep 30 # Wait for the service to be ready
          URL=$(terraform output -raw service_url)
          curl -f $URL/health
        working-directory: ./infrastructure
