
name: CD to GKE

on:
  push:
    branches:
      - main
      - 'feature/**'
  delete:
    branches:
      - 'feature/**'

jobs:
  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build-and-push.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        id: build-and-push
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/kira-take-home-test:${IMAGE_TAG} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/kira-take-home-test:${IMAGE_TAG}
          echo "::set-output name=image_tag::${IMAGE_TAG}"

  deploy_dev:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/heads/feature/')
    environment:
      name: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Workspace
        run: |
          WORKSPACE_NAME=$(echo ${{ github.ref_name }} | sed 's/\//-/g')
          terraform workspace select $WORKSPACE_NAME || terraform workspace new $WORKSPACE_NAME
        working-directory: ./infrastructure

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="image_tag=${{ needs.build.outputs.image_tag }}"
        working-directory: ./infrastructure

  destroy_dev:
    runs-on: ubuntu-latest
    if: github.event_name == 'delete'
    environment:
      name: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Workspace
        run: |
          WORKSPACE_NAME=$(echo ${{ github.event.ref }} | sed 's/\//-/g')
          terraform workspace select $WORKSPACE_NAME
        working-directory: ./infrastructure

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./infrastructure

  deploy_prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: http://<your-load-balancer-ip> # Replace with your actual load balancer IP output

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Workspace
        run: terraform workspace select production || terraform workspace new production
        working-directory: ./infrastructure

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="image_tag=${{ needs.build.outputs.image_tag }}"
        working-directory: ./infrastructure
